---
import { Image } from 'astro:assets';
import ContentWrapper from './ContentWrapper.astro';
import CardImg from '../assets/images/card_img.jpg';
import AboutImg01 from '../assets/images/about_img_01.jpg';
import AboutImg02 from '../assets/images/about_img_02.jpg';

let response = await fetch('https://dooshin.net/shiten_wp/wp-json/wp/v2/posts?context=embed&acf_format=standard');
if (!response.ok) {
	throw new Error(`HTTP error! status: ${response.status}`);
}
let posts = await response.json();
---

<div class="p-mv">
	<ContentWrapper>
		<div class="swiper">
			<div class="swiper-wrapper">
				{
					posts.map(post => {
						return (
							<div class="swiper-slide">
								<div class="slide">
									<div class="slide-media">
										<img src={post.thumbnail_url.url} alt="" class="p-mv__icon" />
									</div>
								</div>
							</div>
						);
					})
				}
				{
					posts.map(post => {
						return (
							<div class="swiper-slide">
								<div class="slide">
									<div class="slide-media">
										<img src={post.thumbnail_url.url} alt="" class="p-mv__icon" />
									</div>
								</div>
							</div>
						);
					})
				}
			</div>

			<div class="content-wrapper">
				{
					posts.map(post => {
						let posttitle = post.title.rendered;
						let pattern = ' ';
						let posttitleArray = [];
						if (posttitle.match(pattern)) {
							posttitleArray = posttitle.split(pattern);
						} else {
							posttitleArray = [posttitle];
						}
						return (
							<div class="content">
								<a href={`/artile/${post.slug}`}>
									<p class="content-text">
										<span class="content-text__marker">
											{posttitleArray.slice(0, 2).map(word => (
												<span class="content-text__markerBg">{word}</span>
											))}
										</span>
									</p>
								</a>
							</div>
						);
					})
				}
				{
					posts.map(post => {
						let posttitle = post.title.rendered;
						let pattern = ' ';
						let posttitleArray = [];
						if (posttitle.match(pattern)) {
							posttitleArray = posttitle.split(pattern);
						} else {
							posttitleArray = [posttitle];
						}
						return (
							<div class="content">
								<a href={`/artile/${post.slug}`}>
									<p class="content-text">
										<span class="content-text__marker">
											{posttitleArray.slice(0, 2).map(word => (
												<span class="content-text__markerBg">{word}</span>
											))}
										</span>
									</p>
								</a>
							</div>
						);
					})
				}
			</div>
		</div>
	</ContentWrapper>
</div>

<style is:global lang="scss">
	.p-mv {
		position: relative;
		z-index: 1;
		width: 100%;
		height: 100svh;
		overflow: hidden;
		background-image: url('/mv_pc.jpg');
		background-repeat: no-repeat;
		background-position: center;
		background-size: cover;

		@media screen and (max-width: 768px) {
			background-image: url('/mv_sp.jpg');
		}

		&::before {
			position: absolute;
			top: 0;
			left: 0;
			z-index: -1;
			width: 100%;
			height: 100%;
			content: '';
			background: rgb(255 255 255 / 30%);
		}

		.swiper {
			height: 100svh;
		}
	}

	.swiper-wrapper {
		width: 100%;
		max-width: 650px;
		margin-block: 2svh 10svh;
		margin-left: auto;
	}

	.slide-media {
		position: relative;
		z-index: 1;
		width: 100%;
		height: 88svh;
		background-image: url('../assets/images/scope_icon.svg');
		background-repeat: no-repeat;
		background-size: contain;

		@media only screen and (max-width: 1024px) {
			height: max(70vh, 70vw);
		}

		@media only screen and (max-width: 768px) {
			height: 88svh;
		}

		img {
			width: 100%;
			max-width: 460px;
			height: 100%;
			max-height: 460px;
			margin-top: 50px;
			margin-left: 50px;
			border-radius: 50%;
			object-fit: cover;
			object-position: center;
		}
	}

	.content {
		position: absolute;
		bottom: min(40px, 20svh);
		box-sizing: content-box;
		max-width: 660px;
		height: 200px;
		margin-block: auto;
		margin-right: auto;
	}

	.content-text__markerBg {
		position: relative;
		z-index: 3;
		display: inline-block;
		width: fit-content;
		padding: 8px 16px;
		font-size: clamp(16px, 0.286rem + 3.57vw, 56px);
		font-weight: bold;
		white-space: nowrap;
		opacity: 0;
		transition: opacity 0.2s ease-in;

		&:last-of-type {
			margin-top: 16px;
		}
	}

	.content.is-animated {
		.content-text__markerBg {
			opacity: 1;

			&::before {
				position: absolute;
				top: 0;
				left: 0;
				z-index: -1;
				width: 100%;
				height: 100%;
				content: '';
				background: #fff;
				transform-origin: left center;
				animation: bg 2.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
			}
		}
	}

	@keyframes bg {
		0% {
			opacity: 0;
			transform: scaleX(0) translateX(-5%);
		}

		30% {
			transform: scaleX(1) translateX(0);
		}

		100% {
			transform: scaleX(1) translateX(0);
		}

		30%,
		100% {
			opacity: 1;
		}
	}
</style>

<script type="module">
	import Swiper from 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.mjs';

	const slideLength = document.querySelectorAll('.p-mv .swiper-slide').length;
	const startAnimation = index => {
		let activeSlide = document.querySelectorAll('.p-mv .content')[index];
		activeSlide.classList.add('is-animated');
	};
	// アニメーション終了
	const finishAnimation = () => {
		let activeSlides = document.querySelectorAll('.p-mv .content');
		activeSlides.forEach(activeSlides => {
			activeSlides.classList.remove('is-animated');
		});
	};

	const mySwiper = new Swiper('.p-mv .swiper', {
		loop: true,
		loopAdditionalSlides: 2,
		speed: 2000,
		effect: 'fade',
		autoplay: {
			delay: 4000,
			disableOnInteraction: false,
			waitForTransition: false,
		},
		followFinger: false,
		observeParents: true,
		on: {
			slideChange: swiper => {
				finishAnimation();
			},
			slideChangeTransitionStart: swiper => {
				startAnimation(swiper.realIndex);
			},
		},
	});
</script>
